// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Ticket {
    id                         String           @id @default(uuid())
    ticketType                 String
    ticketNumber               String           @unique
    ticketTitle                String
    ticketDescription          String
    position                   Int
    file1                      String?
    file2                      String?
    file3                      String?
    activeFlag                 Boolean          @default(true)
    ticketProgress             TicketProgress   @relation(name: "ticketProgressTicketTicketProgress", fields: [ticketProgressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ticketProgressId           String
    createdBy                  String?
    createdAt                  DateTime         @default(now())
    updatedBy                  String?
    updatedAt                  DateTime         @default(now()) @updatedAt
    ticketTicketActivityTicket TicketActivity[] @relation(name: "ticketTicketActivityTicket")

    @@index([id, ticketNumber, ticketTitle, ticketDescription, ticketProgressId, position, file1, file2, file3, createdBy, updatedBy])
    @@map("Tickets")
}

model TicketProgress {
    id                                 String   @id @default(uuid())
    ticketProgressTicketTicketProgress Ticket[] @relation(name: "ticketProgressTicketTicketProgress")
    ticketProgressName                 String   @unique
    ticketProgressCode                 String?
    position                           Int
    theme                              String?
    description                        String?
    createdBy                          String?
    createdAt                          DateTime @default(now())
    updatedBy                          String?
    updatedAt                          DateTime @default(now()) @updatedAt

    @@index([id, ticketProgressName, ticketProgressCode, position, description, createdBy, updatedBy])
    @@map("Ticket_Progress")
}

model TicketActivity {
    id             String   @id @default(uuid())
    activityNumber String   @unique
    activity       String
    file1          String?
    file2          String?
    file3          String?
    ticket         Ticket   @relation(name: "ticketTicketActivityTicket", fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ticketId       String
    createdBy      String?
    createdAt      DateTime @default(now())
    updatedBy      String?
    updatedAt      DateTime @default(now()) @updatedAt
}
